generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  description String
  imageUrl    String
  name        String
  price       Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  //we can fetch all cart items that contain a product, through the product model:
  CartItem    CartItem[]
  category    String     @default("Entradas")

  @@map("products")
}

model Cart {
  //automatically create an id of type mongoDB ObjectId
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  //this allows us to fetch all cart items that belong to a cart:
  items     CartItem[]
  userId    String?    @db.ObjectId
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Order     Order[]

  //the name of the colection in the database:
  @@map("carts")
}

model CartItem {
  //id is autogenerated, while productId is a reference to the Product model
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  //we use relations: id is the id of the Product model
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade) //onDelete: Cascade means that if we delete a product, all cart items that contain that product will also be deleted
  quantity  Int
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cartItems")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Cart          Cart[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Order {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  amount          Float
  currency        String
  status          String
  deliveryStatus  String
  createdAt       DateTime @default(now())
  paymentIntentId String   @unique
  cartId          String   @db.ObjectId
  cart            Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  // updatedAt      DateTime @updatedAt
  @@map("orders")
}

// model Category {
//   id     String @id @default(auto()) @map("_id") @db.ObjectId
//   name   String @unique
//   cartId String @db.ObjectId
//   cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
// }
